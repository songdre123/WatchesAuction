version: "3.8"

volumes:
  rabbitmq_data:
  pgdata: 

networks:
  kong-net:
    driver: bridge
    name: kong-net

services:

################################################## KONG API Gateway ##################################################

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.



 
################################################## Microservices Gateway ##################################################


  ###################################
  # Notification: The Notification microservice
  ###################################
  notification:
    build:
      context: ./Notification
      dockerfile: notification.dockerfile
    image: wangkaijie2001/notification:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://@host.docker.internal:3306/Notification
      PYTHONUNBUFFERED: 1
    ports:
      - "5004:5004"

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq

  ###################################
  # User: The User microservice
  ###################################
  user:
    build:
      context: ./Users
      dockerfile: user.dockerfile
    image: wangkaijie2001/user:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://@host.docker.internal:3306/Users
      PYTHONUNBUFFERED: 1
    ports:
      - "5000:5000"
    networks:
      - kong-net


  ###################################
  # Auction: The Auction microservice
  ###################################
  auction:
    build:
      context: ./Auction
      dockerfile: auction.dockerfile
    image: wangkaijie2001/auction:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://@host.docker.internal:3306/Auction
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"

  ###################################
  # Bid: The Auction microservice
  ###################################
  bid:
    build:
      context: ./Bids
      dockerfile: bids.dockerfile
    image: wangkaijie2001/bid:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://@host.docker.internal:3306/bids
      PYTHONUNBUFFERED: 1
    ports:
      - "5002:5002"

  ###################################
  # Schedule: The Schedule microservice
  ###################################
  schedule:
    build:
      context: ./Schedule
      dockerfile: schedule.dockerfile
    image: wangkaijie2001/schedule:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://@host.docker.internal:3306/Schedule
      PYTHONUNBUFFERED: 1
    ports:
      - "5003:5003"


  #################################################
  # pricePredictor: The pricePredictor microservice (complex)
  #################################################
  pricePredictor:
    build:
      context: ./PricePredictor
      dockerfile: pricePredictor.dockerfile
    image: wangkaijie2001/pricepredictor:esd
    restart: always
    environment:      
      PYTHONUNBUFFERED: 1
    ports:
      - "5008:5008"




  #################################################
  # createNotification: The createNotification microservice (complex)
  #################################################
  createNotification:
    build:
      context: ./createNotification
      dockerfile: createNotification.dockerfile
    image: wangkaijie2001/createnotification:esd
    restart: always
    depends_on:
      - rabbitmq
      - user
      - auction
      - notification
      - schedule
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      a_queue_name: Notification
      user_url: http://user:5000/user
      auction_url: http://auction:5001/auction 
      notification_url: http://notification:5004/notification 
      schedule_url: http://schedule:5003/schedule  
      PYTHONUNBUFFERED: 1


  #################################################
  # test: The test microservice (complex)
  #################################################
  test:
    build:
      context: ./
      dockerfile: test.dockerfile
    image: wangkaijie2001/test:esd
    restart: always
    depends_on:
      - rabbitmq
      - user
      - auction
      - notification
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      a_queue_name: Notification
      user_url: http://user:5000/user
      auction_url: http://auction:5001/auction 
      notification_url: http://notification:5004/notification 
      PYTHONUNBUFFERED: 1
    ports:
      - "5100:5100"

  

  #################################################
  # createAuction: The createAuction microservice (complex)
  #################################################
  createAuction:
    build:
      context: ./CreateAuction
      dockerfile: createAuction.dockerfile
    image: wangkaijie2001/createauction:esd
    restart: always
    depends_on:
      - auction
      - schedule
    environment:      
      auction_url: http://auction:5001/auction 
      schedule_url: http://schedule:5003/schedule 
      PYTHONUNBUFFERED: 1
    ports:
      - "5010:5010"




  #################################################
  # processBid: The processBid microservice (complex)
  #################################################
  processBid:
    build:
      context: ./ProcessBid
      dockerfile: ProcessBid.dockerfile
    image: wangkaijie2001/processbid:esd
    restart: always
    depends_on:
      - rabbitmq
      - auction
      - bid
    environment:      
      rabbit_host: rabbitmq
      rabbit_port: 5672
      a_queue_name: Notification
      auction_url: http://auction:5001/auction 
      bids_url: http://bid:5002/bid
      PYTHONUNBUFFERED: 1
    ports:
      - "5006:5006"


  #################################################
  # ProcessWinner: The ProcessWinner microservice (complex)
  #################################################
  processWinner:
    build:
      context: ./ProcessWinner
      dockerfile: processWinner.dockerfile
    image: wangkaijie2001/processwinner:esd
    restart: always
    depends_on:
      - rabbitmq
      - auction
      - bid
    environment:      
      rabbit_host: rabbitmq
      rabbit_port: 5672
      a_queue_name: Notification
      auction_url: http://auction:5001/auction 
      bids_url: http://bid:5002/bid
      PYTHONUNBUFFERED: 1
    ports:
      - "5005:5005"

